This is John's personal developer notes for the CDA1 project.  Probably pretty boring reading
for anyone not intently helping out.

8/21/23

* Project setup & Github repo creation.
* Completed first version of rqmts spec.

8/22/23

* Got legacy cda0 code running after breaking up all the classes in the main environment file
  so they are now in their own files.

8/23/23

* Rewrote the Roadway class to represent the new road geometry.

8/24/23

* Fixed some things in inference prgm and got it to display the new roadway.

8/27/23

* Began revamping the environment model to be more generalized with roadway definition and vehicle population.

8/28-30/23

* Continued building new environment model.

8/31/23

* Built env model to the point that it executes one iteration in inference (prior to checkpoint loading).

9/1/23

* Tried running inference with the final cda0 checkpoint file. It couldn't load because it was looking for
  the old class structure (simple_highway_ramp_wrapper), which is apparently baked into the checkpoint.

* Tried running the tune program - had to make several tweaks & fixes.
	* Got it running in the tuner.  Now to put in some real logic to get the NN to start learning.

9/2/23

* Updated inference prgm to work with the new vehicle structure and with or without a checkpoint (moving
  neighbor vehicles only).

9/3/23

* Fixed problems contributing to graphical display of vehicle locations.
* Ran inference on scenarios 90-95 with Bot1a controller to confirm geometry & speed limits all work.
* Developed & tested Bot1b controller to give offset to speed limit. 
* Ran a sample training job - everything looks nominal.  Ready to build the real learning controller.

9/4/23

* Wrote the Bridgit vehicle model with its huge observation vector encoding. Still need to test it.

9/5/23

* Wrote testing program for BrigitModel and ran them test suite. Found & fixed several defects.
* Tried running a training session, but got exception - too tired to investigate.


TODO:
- start training!
- Build BridgitCtrl to read a checkpoint & execute it (preferably without Ray)
- Try running inference with real checkpoint - modify the action loop to use BridgitCtrl instead of loading directly?
- Investigate speed overshoot when speed limit changes (with bot1a controller)
- Review all TODOs
- add bot1 lane change capability when on a ramp.
- find a way to load just the NN weights in inference (or in a vehicle controller) so that it can be run
  only with torch, no ray involved.

- Add lane IDs to graphics
- Add vehicle icons to graphics
- Allow env ctor to be called with an initialization code. 
	- value lane_exercise -> cycles reset() through 6 episodes, and each episode places a single vehicle at the
	  beginning of each lane, in sequence, and lets it run the entire lane. Use this to verify the basic functions
	  of the env, roadway, and graphics all work correctly.
- Add ego sensor display to graphics showing pvmt type/speed colors, vehicle speeds
